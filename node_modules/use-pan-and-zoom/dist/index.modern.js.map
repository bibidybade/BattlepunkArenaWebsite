{"version":3,"file":"index.modern.js","sources":["../src/utils.ts","../src/index.ts","../src/use-force-update.ts","../src/use-get-set.ts"],"sourcesContent":["export type position = { x: number; y: number };\nexport type transform = { x: number; y: number; zoom: number };\n\nexport function noop() {}\n\nexport const clamp = (min: number, max: number) => (value: number) =>\n  Math.max(min, Math.min(value, max));\n\nexport function dist(a: position, b: position) {\n  return Math.sqrt(Math.pow(a.x - b.x, 2) + Math.pow(a.y - b.y, 2));\n}\n\nexport function getPositionOnElement(\n  element: HTMLElement | null | undefined,\n  position: position\n): position {\n  const positionOnElement = { ...position };\n  while (element) {\n    positionOnElement.x -= element.offsetLeft;\n    positionOnElement.y -= element.offsetTop;\n    element = <HTMLElement | undefined>element.offsetParent;\n  }\n  return positionOnElement;\n}\n","import { useCallback, useMemo, useRef } from \"react\";\n\nimport {\n  noop,\n  clamp,\n  dist,\n  getPositionOnElement,\n  position,\n  transform,\n} from \"./utils\";\n\nimport useGetSet from \"./use-get-set\";\nimport useForceUpdate from \"./use-force-update\";\n\nexport default function usePanZoom({\n  enablePan = true,\n  enableZoom = true,\n  requireCtrlToZoom = false,\n  disableWheel = false,\n  panOnDrag = true,\n  preventClickOnPan = true,\n  zoomSensitivity = 0.01,\n  minZoom = 0,\n  maxZoom = Infinity,\n  minX = -Infinity,\n  maxX = Infinity,\n  minY = -Infinity,\n  maxY = Infinity,\n  initialZoom = 1,\n  initialPan = { x: 0, y: 0 },\n  onPanStart = noop,\n  onPan = noop,\n  onPanEnd = noop,\n  onZoom = noop,\n}: {\n  enablePan?: boolean;\n  enableZoom?: boolean;\n  requireCtrlToZoom?: boolean;\n  disableWheel?: boolean;\n  panOnDrag?: boolean;\n  preventClickOnPan?: boolean;\n  zoomSensitivity?: number;\n  minZoom?: number;\n  maxZoom?: number;\n  minX?: number;\n  maxX?: number;\n  minY?: number;\n  maxY?: number;\n  initialZoom?: number;\n  initialPan?: position;\n  onPanStart?: (touches: position[], transform: transform) => void;\n  onPan?: (touches: position[], transform: transform) => void;\n  onPanEnd?: () => void;\n  onZoom?: (transform: transform) => void;\n} = {}) {\n  const containerRef = useRef<HTMLElement | null>(null);\n  const forceUpdate = useForceUpdate();\n  const [getState, setState] = useGetSet<{\n    wasPanning: boolean;\n    isPanning: boolean;\n    prevPointers: position[];\n    prevZoom: number;\n    center: position;\n    transform: transform;\n  }>({\n    wasPanning: false,\n    isPanning: false,\n    prevPointers: [],\n    prevZoom: 1,\n    center: { x: 0, y: 0 },\n    transform: { ...initialPan, zoom: initialZoom },\n  });\n\n  const clampX = useMemo(() => clamp(minX, maxX), [minX, maxX]);\n  const clampY = useMemo(() => clamp(minY, maxY), [minY, maxY]);\n  const clampZoom = useMemo(() => clamp(minZoom, maxZoom), [minZoom, maxZoom]);\n\n  const setTransform = useCallback(\n    (v: transform | ((current: transform) => transform)) => {\n      const container = containerRef.current;\n      const state = getState();\n      if (container) {\n        state.transform = typeof v === \"function\" ? v(state.transform) : v;\n        state.center.x =\n          (container.offsetWidth / 2 - state.transform.x) /\n          state.transform.zoom;\n        state.center.y =\n          (container.offsetHeight / 2 - state.transform.y) /\n          state.transform.zoom;\n\n        setState(state);\n        forceUpdate();\n      }\n      return state.transform;\n    },\n    [getState, setState, forceUpdate]\n  );\n\n  const setPan = useCallback(\n    (value: ((current: position) => position) | position) =>\n      setTransform(({ x, y, zoom }) => {\n        const newPan = typeof value === \"function\" ? value({ x, y }) : value;\n\n        return {\n          x: clampX(newPan.x),\n          y: clampY(newPan.y),\n          zoom,\n        };\n      }),\n    [clampX, clampY, setTransform]\n  );\n\n  const setZoom = useCallback(\n    (value: number | ((current: number) => number), maybeCenter?: position) => {\n      const container = containerRef.current;\n      if (container) {\n        setTransform(({ x, y, zoom }) => {\n          const newZoom = clampZoom(\n            typeof value === \"function\" ? value(zoom) : value\n          );\n\n          const center = maybeCenter\n            ? {\n                x: maybeCenter.x - container.offsetWidth / 2,\n                y: maybeCenter.y - container.offsetHeight / 2,\n              }\n            : { x: 0, y: 0 };\n\n          return {\n            x: clampX(x + ((center.x - x) * (zoom - newZoom)) / zoom),\n            y: clampY(y + ((center.y - y) * (zoom - newZoom)) / zoom),\n            zoom: newZoom,\n          };\n        });\n      }\n    },\n    [clampX, clampY, clampZoom, setTransform]\n  );\n\n  const startPanZoom = useCallback(\n    (pointers: position[]) => {\n      if (enablePan) {\n        const state = getState();\n        state.prevPointers = pointers;\n        state.isPanning = true;\n        setState(state);\n        onPanStart(pointers, state.transform);\n      }\n    },\n    [enablePan, onPanStart, setState, getState]\n  );\n\n  const movePanZoom = useCallback(\n    (pointers: position[]) => {\n      const state = getState();\n      if (state.isPanning) {\n        state.wasPanning = true;\n\n        const prevPointers = state.prevPointers;\n        state.prevPointers = pointers;\n        setState(state);\n\n        let dx = 0,\n          dy = 0;\n        const l = Math.min(pointers.length, prevPointers.length, 2);\n\n        for (let i = 0; i < l; i++) {\n          dx += pointers[i].x - prevPointers[i].x;\n          dy += pointers[i].y - prevPointers[i].y;\n        }\n        dx /= l;\n        dy /= l;\n        const scale =\n          l === 2\n            ? dist(pointers[0], pointers[1]) /\n              dist(prevPointers[0], prevPointers[1])\n            : 1;\n\n        setPan(({ x, y }) => ({\n          x: x + dx,\n          y: y + dy,\n        }));\n        setZoom((zoom) => zoom * scale);\n\n        forceUpdate();\n        onPan(pointers, getState().transform);\n      }\n    },\n    [onPan, setPan, setZoom, getState, setState, forceUpdate]\n  );\n\n  const endPanZoom = useCallback(() => {\n    const state = getState();\n    if (state.isPanning) {\n      setState((state) => ({ ...state, isPanning: false }));\n      onPanEnd();\n    }\n  }, [onPanEnd, getState, setState]);\n\n  const onClickCapture = useCallback(\n    (event: React.MouseEvent) => {\n      const state = getState();\n      if (preventClickOnPan && state.wasPanning) {\n        setState((state) => ({ ...state, wasPanning: false }));\n        event.stopPropagation();\n      }\n    },\n    [preventClickOnPan, getState, setState]\n  );\n\n  const onWheel = useCallback(\n    (event) => {\n      if (enableZoom && containerRef.current) {\n        event.preventDefault();\n        if (!requireCtrlToZoom || event.ctrlKey) {\n          const pointerPosition = getPositionOnElement(containerRef.current, {\n            x: event.pageX,\n            y: event.pageY,\n          });\n\n          let deltaY = event.deltaY;\n          if (event.deltaMode === 1) {\n            deltaY *= 15;\n          }\n\n          setZoom(\n            (zoom) => zoom * Math.pow(1 - zoomSensitivity, deltaY),\n            pointerPosition\n          );\n\n          onZoom(getState().transform);\n        } else {\n          setPan(({ x, y }) => ({\n            x: x - event.deltaX,\n            y: y - event.deltaY,\n          }));\n        }\n      }\n    },\n    [\n      enableZoom,\n      requireCtrlToZoom,\n      zoomSensitivity,\n      onZoom,\n      setPan,\n      setZoom,\n      getState,\n    ]\n  );\n\n  const onGestureStart = useCallback(\n    (event) => {\n      event.preventDefault();\n      setState((state) => ({ ...state, prevZoom: state.transform.zoom }));\n    },\n    [setState]\n  );\n\n  const onGesture = useCallback(\n    (event) => {\n      event.preventDefault();\n\n      const pointerPosition = getPositionOnElement(containerRef.current, {\n        x: event.pageX,\n        y: event.pageY,\n      });\n      setZoom(getState().prevZoom * event.scale, pointerPosition);\n      onZoom(getState().transform);\n    },\n    [setZoom, onZoom, getState]\n  );\n\n  const setContainer = useCallback(\n    (el) => {\n      if (el) {\n        if (!disableWheel) {\n          el.addEventListener(\"wheel\", onWheel);\n        }\n        el.addEventListener(\"gesturestart\", onGestureStart);\n        el.addEventListener(\"gesturechange\", onGesture);\n        el.addEventListener(\"gestureend\", onGesture);\n      } else if (containerRef.current) {\n        return () => {\n          const container = containerRef.current;\n          if (container) {\n            if (!disableWheel) {\n              container.removeEventListener(\"wheel\", onWheel);\n            }\n            container.removeEventListener(\"gesturestart\", onGestureStart);\n            container.removeEventListener(\"gesturechange\", onGesture);\n            container.removeEventListener(\"gestureend\", onGesture);\n          }\n        };\n      }\n      containerRef.current = el;\n    },\n    [onWheel, onGestureStart, onGesture, disableWheel]\n  );\n\n  const onTouchStart = useCallback(\n    (event: React.TouchEvent) =>\n      startPanZoom(\n        Array.from(event.touches).map(({ pageX, pageY }) => ({\n          x: pageX,\n          y: pageY,\n        }))\n      ),\n    [startPanZoom]\n  );\n  const onTouchMove = useCallback(\n    (event: React.TouchEvent) =>\n      movePanZoom(\n        Array.from(event.touches).map(({ pageX, pageY }) => ({\n          x: pageX,\n          y: pageY,\n        }))\n      ),\n    [movePanZoom]\n  );\n  const onTouchEnd = useCallback(\n    (event: React.TouchEvent) => {\n      if (event.touches.length === 0) {\n        endPanZoom();\n      } else {\n        startPanZoom(\n          Array.from(event.touches).map(({ pageX, pageY }) => ({\n            x: pageX,\n            y: pageY,\n          }))\n        );\n      }\n    },\n    [endPanZoom, startPanZoom]\n  );\n  const onMouseDown = useCallback(\n    (event: React.MouseEvent) =>\n      startPanZoom([{ x: event.pageX, y: event.pageY }]),\n    [startPanZoom]\n  );\n  const onMouseMove = useCallback(\n    (event: React.MouseEvent) =>\n      movePanZoom([{ x: event.pageX, y: event.pageY }]),\n    [movePanZoom]\n  );\n\n  const state = getState();\n  return {\n    container: containerRef.current,\n    setContainer,\n    transform: `translate3D(${state.transform.x}px, ${state.transform.y}px, 0) scale(${state.transform.zoom})`,\n    center: state.center,\n    pan: { x: state.transform.x, y: state.transform.y },\n    zoom: state.transform.zoom,\n    setPan,\n    setZoom,\n    panZoomHandlers: panOnDrag\n      ? {\n          onTouchStart,\n          onTouchMove,\n          onTouchEnd: onTouchEnd,\n          onTouchCancel: onTouchEnd,\n          onMouseDown,\n          onMouseMove,\n          onMouseUp: endPanZoom,\n          onMouseLeave: endPanZoom,\n          onClickCapture,\n        }\n      : {},\n  };\n}\n","import { useCallback, useState } from \"react\";\n\nexport default function useForceUpdate() {\n  const [, dispatch] = useState(false);\n  const forceUpdate = useCallback(() => {\n    dispatch((state) => !state);\n  }, []);\n\n  return forceUpdate;\n}\n","import { useCallback, useRef } from \"react\";\n\nexport default function useGetSet<T>(\n  initialValue: T\n): [() => T, (value: ((current: T) => T) | T) => T] {\n  const ref = useRef(initialValue);\n  const get = useCallback(() => ref.current, []);\n  const set = useCallback((value: ((current: T) => T) | T) => {\n    if (typeof value === \"function\") {\n      ref.current = (value as (current: T) => T)(ref.current);\n    } else {\n      ref.current = value;\n    }\n    return ref.current;\n  }, []);\n\n  return [get, set];\n}\n"],"names":["noop","clamp","min","max","value","Math","dist","a","b","sqrt","pow","x","y","getPositionOnElement","element","position","positionOnElement","offsetLeft","offsetTop","offsetParent","usePanZoom","enablePan","enableZoom","requireCtrlToZoom","disableWheel","panOnDrag","preventClickOnPan","zoomSensitivity","minZoom","maxZoom","Infinity","minX","maxX","minY","maxY","initialZoom","initialPan","onPanStart","onPan","onPanEnd","onZoom","containerRef","useRef","forceUpdate","dispatch","useState","useCallback","state","useForceUpdate","getState","setState","initialValue","ref","current","useGetSet","wasPanning","isPanning","prevPointers","prevZoom","center","transform","zoom","clampX","useMemo","clampY","clampZoom","setTransform","v","container","offsetWidth","offsetHeight","setPan","newPan","setZoom","maybeCenter","newZoom","startPanZoom","pointers","movePanZoom","dx","dy","l","length","i","scale","endPanZoom","onClickCapture","event","stopPropagation","onWheel","preventDefault","ctrlKey","pointerPosition","pageX","pageY","deltaY","deltaMode","deltaX","onGestureStart","onGesture","setContainer","el","addEventListener","removeEventListener","onTouchStart","Array","from","touches","map","onTouchMove","onTouchEnd","onMouseDown","onMouseMove","pan","panZoomHandlers","onTouchCancel","onMouseUp","onMouseLeave"],"mappings":"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"}