"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var visibilityObserverMap = {};
exports.addObserver = function (el, margin, cb) {
    // tslint:disable-next-line
    if (typeof window === "undefined")
        return;
    if (!IntersectionObserver)
        return;
    // Try to get the ioListener.
    var ioListener = visibilityObserverMap[margin];
    if (!ioListener) {
        // If we don't have it initialize it.
        var listeners_1 = [];
        var callback = function (entries) {
            entries.forEach(function (entry) {
                listeners_1.forEach(function (_a) {
                    var el = _a.el, cb = _a.cb;
                    if (el === entry.target) {
                        // Edge doesn't currently support isIntersecting, so also test for an intersectionRatio > 0
                        if (entry.isIntersecting || entry.intersectionRatio > 0) {
                            visibilityObserverMap[margin].io.unobserve(el);
                            cb();
                        }
                    }
                });
            });
        };
        var io = new IntersectionObserver(callback, {
            rootMargin: margin + "px",
        });
        ioListener = {
            listeners: listeners_1,
            io: io,
        };
        visibilityObserverMap[margin] = ioListener;
    }
    ioListener.listeners.push({ el: el, cb: cb });
    ioListener.io.observe(el);
};
//# sourceMappingURL=visibilityObserver.js.map