"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importStar(require("react"));
var emotion_1 = require("emotion");
var styles_1 = require("./styles");
var getPaddingBottom_1 = require("./getPaddingBottom");
var react_img_tag_1 = require("react-img-tag");
var noscript_1 = require("./noscript");
var supportsWebP_1 = __importDefault(require("./supportsWebP"));
var FastImageImage = /** @class */ (function (_super) {
    __extends(FastImageImage, _super);
    function FastImageImage(props) {
        var _this = _super.call(this, props) || this;
        _this.onIntersection = function (entries) {
            if (!_this.intersectionObserver)
                return;
            var entry = entries[0] || {};
            // Edge doesn't currently support isIntersecting, so also test for an intersectionRatio > 0
            if (entry.isIntersecting || entry.intersectionRatio > 0) {
                _this.intersectionObserver.unobserve(entry.target);
                _this.onVisible();
            }
        };
        _this.onNextFrame = function () {
            if (_this.media && _this.outer && _this.inner) {
                _this.media.className = emotion_1.cx(styles_1.cssAsset, _this.props.classNameMedia, _this.props.classNameMediaVisible);
                _this.outer.className = emotion_1.cx(styles_1.cssContainerOuter, _this.props.className, _this.props.classNameVisible);
                _this.inner.className = emotion_1.cx(styles_1.cssContainerInner, _this.props.classNameContainer, _this.props.classNameContainerVisible);
            }
        };
        _this.onDecode = function () {
            if (_this.inner && _this.media) {
                _this.inner.appendChild(_this.media);
                setTimeout(_this.onNextFrame, 32);
                if (_this.props.onAddedToDOM) {
                    _this.props.onAddedToDOM();
                }
            }
        };
        _this.onLoad = function () {
            if (_this.media.decode) {
                ;
                _this.media.decode().then(_this.onDecode);
            }
            else {
                setTimeout(_this.onDecode);
            }
        };
        _this.src = function () { return (supportsWebP_1.default ? _this.props.webPSrc || _this.props.src : _this.props.src); };
        _this.srcSet = function () { return (supportsWebP_1.default ? _this.props.webPSrcSet || _this.props.srcSet : _this.props.srcSet); };
        _this.onVisible = function () {
            var media = new Image();
            // We will load the image, then decode it, then add it to the DOM.
            // By doing this we can ensure we will minimize frame drops.
            media.onload = _this.onLoad;
            // Set props.
            // Order is important.
            media.sizes = _this.props.sizes || '';
            media.srcset = _this.srcSet() || '';
            media.src = _this.src() || '';
            media.alt = _this.props.alt || '';
            media.className = emotion_1.cx(styles_1.cssAsset, _this.props.classNameMedia);
            _this.media = media;
        };
        _this.captureInnerRef = function (ref) { return (_this.inner = ref); };
        _this.captureOuterRef = function (ref) {
            if (ref && _this.intersectionObserver) {
                _this.intersectionObserver.observe(ref);
            }
            _this.outer = ref;
        };
        // tslint:disable-next-line
        if (typeof window === 'undefined')
            return _this;
        if (window.IntersectionObserver) {
            _this.intersectionObserver = new IntersectionObserver(_this.onIntersection, {
                rootMargin: props.lazyLoadMargin,
                threshold: 0,
            });
        }
        return _this;
    }
    FastImageImage.prototype.componentWillUnmount = function () {
        if (!this.intersectionObserver)
            return;
        if (this.outer) {
            this.intersectionObserver.unobserve(this.outer);
        }
    };
    FastImageImage.prototype.render = function () {
        var _a = this.props, base64 = _a.base64, className = _a.className, classNameContainer = _a.classNameContainer, classNameMedia = _a.classNameMedia, lazy = _a.lazy, alt = _a.alt, sizes = _a.sizes, height = _a.height, width = _a.width;
        var imgHtml = react_img_tag_1.imgTagString({
            src: this.src(),
            srcSet: this.srcSet(),
            alt: alt,
            sizes: sizes,
            className: emotion_1.cx(styles_1.cssAsset, classNameMedia),
        });
        var html = lazy ? noscript_1.noscript(imgHtml) : imgHtml;
        return (react_1.default.createElement("span", { style: { width: width }, className: emotion_1.cx(styles_1.cssContainerOuter, className), ref: this.captureOuterRef },
            react_1.default.createElement("span", { className: emotion_1.cx(styles_1.cssContainerInner, classNameContainer), style: {
                    paddingBottom: getPaddingBottom_1.getPaddingBottom(width, height),
                    backgroundSize: 'cover',
                    backgroundImage: base64 ? "url('" + base64 + "')" : undefined,
                }, ref: lazy ? this.captureInnerRef : undefined, dangerouslySetInnerHTML: { __html: html } })));
    };
    return FastImageImage;
}(react_1.PureComponent));
exports.FastImageImage = FastImageImage;
//# sourceMappingURL=FastImageImage.js.map